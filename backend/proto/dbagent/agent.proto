syntax = "proto3";

package dbagent;

option go_package = "civicweave/backend/proto/dbagent";

// Database Agent Service - Secure gRPC interface for database deployment management
service DatabaseAgent {
  // Health check and basic connectivity
  rpc Ping(PingRequest) returns (PingResponse);
  
  // Compare local manifest to live database schema
  rpc CompareManifest(CompareManifestRequest) returns (CompareManifestResponse);
  
  // Extract current database schema as manifest
  rpc DownloadManifest(DownloadManifestRequest) returns (DownloadManifestResponse);
  
  // Deploy manifest to database (with dry-run support)
  rpc DeployManifest(DeployManifestRequest) returns (DeployManifestResponse);
  
  // Get deployment history for a database
  rpc GetDeploymentHistory(DeploymentHistoryRequest) returns (DeploymentHistoryResponse);
  
  // Bootstrap a new database from scratch
  rpc Bootstrap(BootstrapRequest) returns (BootstrapResponse);
}

// Request/Response Messages

message PingRequest {
  string client_version = 1;
}

message PingResponse {
  string agent_version = 1;
  string status = 2;
  int64 timestamp = 3;
}

message CompareManifestRequest {
  string database_name = 1;
  Manifest manifest = 2;
  bool include_data_diff = 3; // Whether to compare data differences
}

message CompareManifestResponse {
  bool is_identical = 1;
  repeated string differences = 2;
  repeated string missing_objects = 3;
  repeated string extra_objects = 4;
  repeated DataDiff data_differences = 5;
  string local_checksum = 6;
  string remote_checksum = 7;
}

message DownloadManifestRequest {
  string database_name = 1;
  bool include_data = 2; // Whether to include seed data
  string environment = 3; // dev, staging, prod
}

message DownloadManifestResponse {
  Manifest manifest = 1;
  string checksum = 2;
  int32 objects_count = 3;
}

message DeployManifestRequest {
  string database_name = 1;
  Manifest manifest = 2;
  bool dry_run = 3;
  string target_version = 4; // Optional: deploy up to specific version
  bool force = 5; // Skip safety checks
}

message DeployManifestResponse {
  bool success = 1;
  string status = 2; // applied, rolled_back, dry_run, failed
  repeated MigrationResult migrations = 3;
  string execution_plan = 4;
  int64 execution_time_ms = 5;
  repeated string warnings = 6;
  repeated string errors = 7;
}

message DeploymentHistoryRequest {
  string database_name = 1;
  int32 limit = 2; // Max number of deployments to return
  int32 offset = 3; // Pagination offset
}

message DeploymentHistoryResponse {
  repeated DeploymentVersion deployments = 1;
  int32 total_count = 2;
  bool has_more = 3;
}

message BootstrapRequest {
  string database_name = 1;
  string connection_string = 2; // Encrypted connection string
  Manifest manifest = 3;
  bool create_database = 4; // Whether to create the database if it doesn't exist
}

message BootstrapResponse {
  bool success = 1;
  string database_name = 2;
  repeated MigrationResult migrations = 3;
  int64 execution_time_ms = 4;
  repeated string warnings = 5;
  repeated string errors = 6;
}

// Core Data Types

message Manifest {
  string version = 1;
  string description = 2;
  string author = 3;
  int64 created_at = 4;
  repeated Migration migrations = 5;
  repeated SeedData seed_data = 6;
  ManifestMetadata metadata = 7;
}

message Migration {
  string version = 1; // V001, V002, etc.
  string name = 2;
  string description = 3;
  string up_sql = 4;
  string down_sql = 5;
  repeated string dependencies = 6;
  string checksum = 7;
  int64 execution_time_ms = 8;
}

message SeedData {
  string environment = 1; // dev, staging, prod
  string table_name = 2;
  repeated string sql_statements = 3;
  string checksum = 4;
}

message ManifestMetadata {
  string min_runtime_version = 1;
  string max_runtime_version = 2;
  repeated string tags = 3;
  map<string, string> custom_properties = 4;
}

message DeploymentVersion {
  string id = 1;
  string database_name = 2;
  string version = 3;
  string status = 4; // applied, failed, rolled_back
  int64 applied_at = 5;
  string applied_by = 6;
  string checksum = 7;
  int64 execution_time_ms = 8;
  repeated MigrationResult migrations = 9;
}

message MigrationResult {
  string version = 1;
  string name = 2;
  string status = 3; // applied, failed, skipped, rolled_back
  int64 execution_time_ms = 4;
  string error_message = 5;
  string checksum = 6;
}

message DataDiff {
  string table_name = 1;
  string operation = 2; // added, removed, modified
  int32 record_count = 3;
  string description = 4;
}

// Error and Status Codes
enum StatusCode {
  SUCCESS = 0;
  ERROR = 1;
  AUTH_FAILED = 2;
  DRIFT_DETECTED = 3;
  VALIDATION_FAILED = 4;
  EXECUTION_FAILED = 5;
  NOT_FOUND = 6;
  PERMISSION_DENIED = 7;
}