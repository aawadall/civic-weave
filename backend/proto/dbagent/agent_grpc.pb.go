// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/dbagent/agent.proto

package dbagent

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DatabaseAgent_Ping_FullMethodName                 = "/dbagent.DatabaseAgent/Ping"
	DatabaseAgent_CompareManifest_FullMethodName      = "/dbagent.DatabaseAgent/CompareManifest"
	DatabaseAgent_DownloadManifest_FullMethodName     = "/dbagent.DatabaseAgent/DownloadManifest"
	DatabaseAgent_DeployManifest_FullMethodName       = "/dbagent.DatabaseAgent/DeployManifest"
	DatabaseAgent_GetDeploymentHistory_FullMethodName = "/dbagent.DatabaseAgent/GetDeploymentHistory"
	DatabaseAgent_Bootstrap_FullMethodName            = "/dbagent.DatabaseAgent/Bootstrap"
)

// DatabaseAgentClient is the client API for DatabaseAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseAgentClient interface {
	// Health check and basic connectivity
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Compare local manifest to live database schema
	CompareManifest(ctx context.Context, in *CompareManifestRequest, opts ...grpc.CallOption) (*CompareManifestResponse, error)
	// Extract current database schema as manifest
	DownloadManifest(ctx context.Context, in *DownloadManifestRequest, opts ...grpc.CallOption) (*DownloadManifestResponse, error)
	// Deploy manifest to database (with dry-run support)
	DeployManifest(ctx context.Context, in *DeployManifestRequest, opts ...grpc.CallOption) (*DeployManifestResponse, error)
	// Get deployment history for a database
	GetDeploymentHistory(ctx context.Context, in *DeploymentHistoryRequest, opts ...grpc.CallOption) (*DeploymentHistoryResponse, error)
	// Bootstrap a new database from scratch
	Bootstrap(ctx context.Context, in *BootstrapRequest, opts ...grpc.CallOption) (*BootstrapResponse, error)
}

type databaseAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseAgentClient(cc grpc.ClientConnInterface) DatabaseAgentClient {
	return &databaseAgentClient{cc}
}

func (c *databaseAgentClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, DatabaseAgent_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseAgentClient) CompareManifest(ctx context.Context, in *CompareManifestRequest, opts ...grpc.CallOption) (*CompareManifestResponse, error) {
	out := new(CompareManifestResponse)
	err := c.cc.Invoke(ctx, DatabaseAgent_CompareManifest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseAgentClient) DownloadManifest(ctx context.Context, in *DownloadManifestRequest, opts ...grpc.CallOption) (*DownloadManifestResponse, error) {
	out := new(DownloadManifestResponse)
	err := c.cc.Invoke(ctx, DatabaseAgent_DownloadManifest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseAgentClient) DeployManifest(ctx context.Context, in *DeployManifestRequest, opts ...grpc.CallOption) (*DeployManifestResponse, error) {
	out := new(DeployManifestResponse)
	err := c.cc.Invoke(ctx, DatabaseAgent_DeployManifest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseAgentClient) GetDeploymentHistory(ctx context.Context, in *DeploymentHistoryRequest, opts ...grpc.CallOption) (*DeploymentHistoryResponse, error) {
	out := new(DeploymentHistoryResponse)
	err := c.cc.Invoke(ctx, DatabaseAgent_GetDeploymentHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseAgentClient) Bootstrap(ctx context.Context, in *BootstrapRequest, opts ...grpc.CallOption) (*BootstrapResponse, error) {
	out := new(BootstrapResponse)
	err := c.cc.Invoke(ctx, DatabaseAgent_Bootstrap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseAgentServer is the server API for DatabaseAgent service.
// All implementations must embed UnimplementedDatabaseAgentServer
// for forward compatibility
type DatabaseAgentServer interface {
	// Health check and basic connectivity
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Compare local manifest to live database schema
	CompareManifest(context.Context, *CompareManifestRequest) (*CompareManifestResponse, error)
	// Extract current database schema as manifest
	DownloadManifest(context.Context, *DownloadManifestRequest) (*DownloadManifestResponse, error)
	// Deploy manifest to database (with dry-run support)
	DeployManifest(context.Context, *DeployManifestRequest) (*DeployManifestResponse, error)
	// Get deployment history for a database
	GetDeploymentHistory(context.Context, *DeploymentHistoryRequest) (*DeploymentHistoryResponse, error)
	// Bootstrap a new database from scratch
	Bootstrap(context.Context, *BootstrapRequest) (*BootstrapResponse, error)
	mustEmbedUnimplementedDatabaseAgentServer()
}

// UnimplementedDatabaseAgentServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseAgentServer struct {
}

func (UnimplementedDatabaseAgentServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDatabaseAgentServer) CompareManifest(context.Context, *CompareManifestRequest) (*CompareManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareManifest not implemented")
}
func (UnimplementedDatabaseAgentServer) DownloadManifest(context.Context, *DownloadManifestRequest) (*DownloadManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadManifest not implemented")
}
func (UnimplementedDatabaseAgentServer) DeployManifest(context.Context, *DeployManifestRequest) (*DeployManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployManifest not implemented")
}
func (UnimplementedDatabaseAgentServer) GetDeploymentHistory(context.Context, *DeploymentHistoryRequest) (*DeploymentHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentHistory not implemented")
}
func (UnimplementedDatabaseAgentServer) Bootstrap(context.Context, *BootstrapRequest) (*BootstrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bootstrap not implemented")
}
func (UnimplementedDatabaseAgentServer) mustEmbedUnimplementedDatabaseAgentServer() {}

// UnsafeDatabaseAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseAgentServer will
// result in compilation errors.
type UnsafeDatabaseAgentServer interface {
	mustEmbedUnimplementedDatabaseAgentServer()
}

func RegisterDatabaseAgentServer(s grpc.ServiceRegistrar, srv DatabaseAgentServer) {
	s.RegisterService(&DatabaseAgent_ServiceDesc, srv)
}

func _DatabaseAgent_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAgentServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseAgent_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAgentServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseAgent_CompareManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAgentServer).CompareManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseAgent_CompareManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAgentServer).CompareManifest(ctx, req.(*CompareManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseAgent_DownloadManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAgentServer).DownloadManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseAgent_DownloadManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAgentServer).DownloadManifest(ctx, req.(*DownloadManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseAgent_DeployManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAgentServer).DeployManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseAgent_DeployManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAgentServer).DeployManifest(ctx, req.(*DeployManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseAgent_GetDeploymentHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAgentServer).GetDeploymentHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseAgent_GetDeploymentHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAgentServer).GetDeploymentHistory(ctx, req.(*DeploymentHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseAgent_Bootstrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BootstrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAgentServer).Bootstrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseAgent_Bootstrap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAgentServer).Bootstrap(ctx, req.(*BootstrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseAgent_ServiceDesc is the grpc.ServiceDesc for DatabaseAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbagent.DatabaseAgent",
	HandlerType: (*DatabaseAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DatabaseAgent_Ping_Handler,
		},
		{
			MethodName: "CompareManifest",
			Handler:    _DatabaseAgent_CompareManifest_Handler,
		},
		{
			MethodName: "DownloadManifest",
			Handler:    _DatabaseAgent_DownloadManifest_Handler,
		},
		{
			MethodName: "DeployManifest",
			Handler:    _DatabaseAgent_DeployManifest_Handler,
		},
		{
			MethodName: "GetDeploymentHistory",
			Handler:    _DatabaseAgent_GetDeploymentHistory_Handler,
		},
		{
			MethodName: "Bootstrap",
			Handler:    _DatabaseAgent_Bootstrap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dbagent/agent.proto",
}
